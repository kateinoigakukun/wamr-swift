import Foundation

let supportArchs = [
    (macroDef: "__x86_64__", asmFile: "invokeNative_em64.s"),
    (macroDef: "__aarch64__", asmFile: "invokeNative_aarch64.s"),
]

let projectDir = URL(fileURLWithPath: #file)
    .deletingLastPathComponent()
    .deletingLastPathComponent()
    .deletingLastPathComponent()
    .deletingLastPathComponent()
let iwasmCommonArchDir = projectDir
    .appendingPathComponent("third-party/wasm-micro-runtime/core/iwasm/common/arch")
let outputInvokeNativeFile = projectDir
    .appendingPathComponent("Sources/wamr-core-darwin/invokeNative.c")


var output = """

/* DO NOT MODIFY THIS FILE! IT IS AUTOMATICALLY GENERATED BY synthesize-invoke-native */


"""
for (index, arch) in supportArchs.enumerated() {
    let file = iwasmCommonArchDir.appendingPathComponent(arch.asmFile)
    let contents = try String(contentsOf: file)
    let parser = AsmParser(contents: contents)
    parser.parse()

    // prologue
    switch index {
    case 0:
        output += "#if defined(\(arch.macroDef))\n"
    default:
        output += "#elif defined(\(arch.macroDef))\n"
    }
    output += """
    /* Copied from https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/core/iwasm/common/arch/\(arch.asmFile) */

    __asm__(
    \(parser.output)
    );

    """
    // epilogue
    switch index {
    case supportArchs.endIndex - 1:
        output += "#endif\n"
    default: break
    }
}

try output.write(to: outputInvokeNativeFile, atomically: true, encoding: .utf8)
